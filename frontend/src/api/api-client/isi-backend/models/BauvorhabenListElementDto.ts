/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Serivce für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BauvorhabenListElementDtoAllOf,
    BauvorhabenListElementDtoAllOfFromJSON,
    BauvorhabenListElementDtoAllOfFromJSONTyped,
    BauvorhabenListElementDtoAllOfToJSON,
} from './BauvorhabenListElementDtoAllOf';
import {
    SearchResultDto,
    SearchResultDtoFromJSON,
    SearchResultDtoFromJSONTyped,
    SearchResultDtoToJSON,
} from './SearchResultDto';
import {
    StadtbezirkModel,
    StadtbezirkModelFromJSON,
    StadtbezirkModelFromJSONTyped,
    StadtbezirkModelToJSON,
} from './StadtbezirkModel';

/**
 * 
 * @export
 * @interface BauvorhabenListElementDto
 */
export interface BauvorhabenListElementDto extends SearchResultDto {
    /**
     * 
     * @type {string}
     * @memberof BauvorhabenListElementDto
     */
    id?: string;
    /**
     * 
     * @type {Set<StadtbezirkModel>}
     * @memberof BauvorhabenListElementDto
     */
    stadtbezirke?: Set<StadtbezirkModel>;
    /**
     * 
     * @type {number}
     * @memberof BauvorhabenListElementDto
     */
    grundstuecksgroesse?: number;
    /**
     * 
     * @type {string}
     * @memberof BauvorhabenListElementDto
     */
    standVorhaben?: BauvorhabenListElementDtoStandVorhabenEnum;
}


/**
 * @export
 */
export const BauvorhabenListElementDtoStandVorhabenEnum = {
    Unspecified: 'UNSPECIFIED',
    GrundsatzEckdatenbeschluss: 'GRUNDSATZ_ECKDATENBESCHLUSS',
    Aufstellungsbeschluss: 'AUFSTELLUNGSBESCHLUSS',
    Parag31Baugb: 'PARAG_3_1_BAUGB',
    Parag32Baugb: 'PARAG_3_2_BAUGB',
    Parag412Baugb: 'PARAG_4_1_2_BAUGB',
    Billigungsbeschluss: 'BILLIGUNGSBESCHLUSS',
    Satzungsbeschluss: 'SATZUNGSBESCHLUSS',
    BplanInKraft: 'BPLAN_IN_KRAFT',
    VorbescheidEingereicht: 'VORBESCHEID_EINGEREICHT',
    BauantragEingereicht: 'BAUANTRAG_EINGEREICHT',
    BaugenehmigungErteilt: 'BAUGENEHMIGUNG_ERTEILT',
    BaubeginnAngezeigt: 'BAUBEGINN_ANGEZEIGT',
    BaufertigstellungGeplant: 'BAUFERTIGSTELLUNG_GEPLANT',
    BaufertigstellungAngezeigt: 'BAUFERTIGSTELLUNG_ANGEZEIGT'
} as const;
export type BauvorhabenListElementDtoStandVorhabenEnum = typeof BauvorhabenListElementDtoStandVorhabenEnum[keyof typeof BauvorhabenListElementDtoStandVorhabenEnum];


export function BauvorhabenListElementDtoFromJSON(json: any): BauvorhabenListElementDto {
    return BauvorhabenListElementDtoFromJSONTyped(json, false);
}

export function BauvorhabenListElementDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BauvorhabenListElementDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...SearchResultDtoFromJSONTyped(json, ignoreDiscriminator),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'stadtbezirke': !exists(json, 'stadtbezirke') ? undefined : (new Set((json['stadtbezirke'] as Array<any>).map(StadtbezirkModelFromJSON))),
        'grundstuecksgroesse': !exists(json, 'grundstuecksgroesse') ? undefined : json['grundstuecksgroesse'],
        'standVorhaben': !exists(json, 'standVorhaben') ? undefined : json['standVorhaben'],
    };
}

export function BauvorhabenListElementDtoToJSON(value?: BauvorhabenListElementDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...SearchResultDtoToJSON(value),
        'id': value.id,
        'stadtbezirke': value.stadtbezirke === undefined ? undefined : (Array.from(value.stadtbezirke as Set<any>).map(StadtbezirkModelToJSON)),
        'grundstuecksgroesse': value.grundstuecksgroesse,
        'standVorhaben': value.standVorhaben,
    };
}

